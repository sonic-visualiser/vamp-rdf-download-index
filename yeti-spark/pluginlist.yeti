
// Dan's suggestion
//  * Vamp aubio plugins, 0.4.0 [info] [download] [download source code]

program pluginlist;

{ route, esc } = load spag;

store = load yertle.store;
property = load yertle.property;
vamprdf = load may.vamp.vamprdf;

pluginStore = store.newRdfStore ();
vamprdf.loadSystemVampRdf pluginStore;

pluginData = 
    map do plugnode:
        data = vamprdf.pluginDataByNode pluginStore plugnode;
        logo =
           (libnodes = map (.s)
               (pluginStore.match { 
                    s = Wildcard (),
                    p = Known (pluginStore.expand "vamp:available_plugin"),
                    o = Known plugnode
                });
            logonodes = concatMap do libnode:
                concatMap do makernode:
                    property.irisProperty pluginStore makernode "foaf:logo"
                done (property.nodesProperty pluginStore libnode "foaf:maker")
            done libnodes;
            case logonodes of
            IRI liri::_: "<img src=\"\(liri)\">";
            _: "";
            esac);
        data with { logo };
    done (vamprdf.allPluginNodes pluginStore);

(load yertle.write).writeToTurtleFile "/tmp/x.ttl" pluginStore;

sortPlugins =
   (props = map (strLower .) [ (.maker), (.library.name), (.name) ];
    sortBy do a b:
        case (find do prop: prop a != prop b done props) of
        prop::_: prop a < prop b;
        _: false;
        esac
    done);

route (Get "/plugin/list") do _:
    "<table>" ^
    strJoin "\n"
       (map do pd:
            desc = strReplace "\n" "<br>" (esc pd.description);
            "<tr><td>\(pd.logo) \(esc pd.maker)</td><td>\(esc pd.library.name)</td><td><b>\(esc pd.name)</b></td></tr>" ^
            "<tr><td></td><td></td><td>\(desc)</td></tr>";
        done (sortPlugins pluginData)) ^
    "</table>"
done;
