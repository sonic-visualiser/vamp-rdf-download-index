
// Dan's suggestion
//  * Vamp aubio plugins, 0.4.0 [info] [download] [download source code]

program pluginlist;

{ route, esc, link, divc, divid, span, spanid } = load spag;

store = load yertle.store;
property = load yertle.property;
vamp = load may.vamp;
vamprdf = load may.vamp.vamprdf;

pluginStore = store.newRdfStore ();
vamprdf.loadSystemVampRdf pluginStore;

platformTag { headers, queryParams } =
    if "platform" in queryParams then queryParams["platform"]
    else
        ua = "User-Agent";
        if ua in headers then
            if headers[ua] =~ "Linux" then
                if headers[ua] =~ "i686" then "linux32"
                else "linux64"
                fi;
            elif headers[ua] =~ "Windows" then "win32"
            elif headers[ua] =~ "Macintosh" then "osx"
            else "unknown"
            fi
        else "unknown"
        fi
    fi;

platformName ptag =
    if ptag == "linux32" then "32-bit Linux"
    elif ptag == "linux64" then "64-bit Linux"
    elif ptag == "win32" then "Windows"
    elif ptag == "osx" then "Mac OS/X"
    else ""
    fi;

platformStatus tag pluginData =
    if tag == "unknown" then MaybeAvailable ()
    elif not empty? (find (== tag) pluginData.library.platforms) then Available ()
    elif empty? pluginData.library.platforms or pluginData.library.source then MaybeAvailable ()
    else Unavailable ()
    fi;

pluginData = 
    map (vamprdf.pluginDataByNode pluginStore)
       (vamprdf.allPluginNodes pluginStore);

warnMissing pdata =
   (warn prop =
        eprintln "** NOTE: \(pdata.pluginKey): Lacks \(prop)";
    libwarn prop =
        eprintln "** NOTE: \(pdata.pluginKey): Library node lacks \(prop)";
    if pdata.name == "" then warn "dc:title" fi;
    if pdata.description == "" then warn "dc:description" fi;
    if pdata.maker == "" then warn "foaf:maker/foaf:name" fi;
    if pdata.copyright == "" then warn "dc:rights" fi;
    if pdata.version == "" then warn "owl:versionInfo" fi;
    if pdata.category == [] then warn "vamp:category" fi;
    if pdata.infoURL == "" then warn "foaf:page" fi;
    if pdata.makerLogoURL == "" then libwarn "foaf:maker/foaf:logo" fi;
    if pdata.library.name == "" then libwarn "dc:title" fi;
    if pdata.library.description == "" then libwarn "dc:description" fi;
    if pdata.library.downloadURL == "" then libwarn "doap:download-page" fi;
    );

for pluginData warnMissing;

nonKeywords = mapIntoHash id id [
    "a", "and", "the", "an", "of", "plugin"
];

keywords search =
    concatMap do w:
        if w in nonKeywords or strLength w < 2 then [] else [w] fi
        done (strSplit "\\s+" search);

textSearchScore search =
   (search = strLower search;
    needles = keywords search;
    do haystack:
        haystack = strLower haystack;
        if strIndexOf haystack search 0 >= 0 then 
            2 * (if needles == [] then 1 else length needles fi)
        else
            fold do acc needle: 
                if strIndexOf haystack needle 0 >= 0 then acc + 1 else acc fi
                done 0 needles
        fi
    done);

pluginSearchScore search plugin =
   (scorer = textSearchScore search;
    3 * scorer plugin.name +
    2 * scorer plugin.library.name +
    scorer plugin.description +
    scorer plugin.library.description +
    scorer plugin.library.soname +
    scorer plugin.maker +
    fold do acc cat: acc + scorer cat done 0 plugin.category);

filterPlugins search ptag plugins =
    if strLength search < 2 then []
    else
        scorer = pluginSearchScore search;
        results = concatMap do p:
            score = scorer p;
            if score > 0 then
                case platformStatus ptag p of
                Available (): [ { score = score + 100, p } ];
                MaybeAvailable (): [ { score = score + 50, p } ];
                Unavailable (): [ { score, p } ];
                esac
            else
                []
            fi
            done plugins;
        map (.p) (sortBy do a b: a.score > b.score done results)
    fi;

sortPlugins =
   (props = map (strLower .) [ (.maker), (.library.name), (.name) ];
    sortBy do a b:
        case (find do prop: prop a != prop b done props) of
        prop::_: prop a < prop b;
        _: false;
        esac
    done);

iriIdMap = [:];
var iriIdNext = 0;

divIdFor iri =
   synchronized iriIdMap do:
       if not iri in iriIdMap then
           iriIdMap[id] := "piri\(iriIdNext)";
           iriIdNext := iriIdNext + 1;
       fi;
       iriIdMap[iri];
   done;

highlighted search text =
   (hlaux search text tlower =
       (ix = strIndexOf tlower search 0;
        if ix >= 0 then
            slen = strLength search;
            tlen = strLength text;
            strLeft text ix ^
                "<span class=\"highlight\">" ^ 
                strSlice text ix (ix + slen) ^
                "</span>" ^ 
                hlaux search 
                   (strSlice text (ix + slen) tlen)
                   (strSlice tlower (ix + slen) tlen);
        else
            text
        fi);
    if search == "" then text
    else 
        h = hlaux (strLower search) text (strLower text);
        if h != text then h
        else fold do acc key:
            hlaux (strLower key) acc (strLower acc)
            done text (keywords search)
        fi
    fi);

renderSearchResult fragment =
    fragment.logo ^ fragment.libraryName ^ fragment.name;

renderSearchResults fragments =
    "<ul>\n" ^
    "<li>" ^
    strJoin "</li>\n<li>" (map renderSearchResult fragments) ^
    "</li>\n" ^
    "</ul>\n";

renderPluginList = renderSearchResults; //!!!

route (Get "/plugin/list") do { headers, queryParams }:
    ptag = platformTag { headers, queryParams };
    pname = platformName ptag;
    eprintln "platform = \(ptag)";
    search = if "search" in queryParams then queryParams["search"] else "" fi;
    processed = (highlighted search) . esc;
    plugs = 
        if search != "" then
            filterPlugins search ptag pluginData
        else
            sortPlugins pluginData
        fi;
    fragments = map do pd:
        {
            name = divc "plugin-name" (processed pd.name),
            description = divc "plugin-description"
               (strReplace "\n" "<br>" (processed pd.description)),
            logo =
                if pd.makerLogoURL == "" then "" 
                else "<img class=\"maker-logo\" src=\"\(pd.makerLogoURL)\">" 
                fi,
            downloadLink = divc "links"
               (if pd.library.downloadURL != "" then
                    if pd.library.infoURL != "" then
                        link pd.library.infoURL "More info" ^ " "
                    else ""
                    fi ^
                        link pd.library.downloadURL "Download"
                elif pd.library.infoURL != "" then
                    link pd.library.infoURL "More info"
                else ""
                fi),
            libraryName = divc "library-name" (processed pd.library.name),
            libraryDescription = divc "library-description" (processed pd.library.description),
            makerName = divc "maker-name" (processed pd.maker),
            availability = 
                if pname == "" then "" 
                else 
                    case platformStatus ptag pd of
                    Available ():
                        divc "availability available" "Available for \(pname)";
                    MaybeAvailable ():
                        divc "availability maybe-available" "Availability for \(pname) uncertain";
                    Unavailable ():
                        divc "availability unavailable" "Not available for \(pname)";
                    esac;
                fi,
            category = divc "category" (processed (strJoin ' > ' pd.category)),
            data = pd,
        }
    done plugs;

    if search != "" then
        renderSearchResults fragments
    else
        renderPluginList fragments
    fi;
done;
