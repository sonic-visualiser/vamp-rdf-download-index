
program pluginlist;

import java.util: Calendar, GregorianCalendar;

{ route, esc, link, urlOf, divc, divid, elt, eltid, span, spanid, staticFileLocation } = load spag;

store = load yertle.store;
vamprdf = load may.vamp.vamprdf;

downloadPageRoute = "/download.html";

pluginStore = store.newRdfStore ();
vamprdf.loadSystemVampRdf pluginStore;

knownPlatforms = mapIntoHash id id [
    "linux32", "linux64", "win32", "osx", "other"
];

vamPyPlatforms = mapIntoHash id id [
    "linux32", "linux64", "win32", "osx"
];

featured = concat
   (matches = pluginStore.match {
        s = Wildcard (), 
        p = Known (pluginStore.expand "vamp:has_featured_plugin"), 
        o = Wildcard ()
    };
    if empty? matches then
        eprintln "** WARNING: No vamp:has_featured_plugin list found";
        []
    else
        map do m:
           case m.o of
           Literal { value = v }: [v];
           _:
               eprintln "** WARNING: featured plugin node \(m.o) is not a literal as expected (was looking for soname:id key string here)";
               [];
           esac
           done
           matches
    fi);

subjects = map (.s);
objects = map (.o);

iriTypes =
    map do t:
        case t of
        IRI iri: IRI iri;
        Blank n: Blank n;
        Literal lit: failWith "Unexpected literal \"\(lit)\" in subject!";
        esac done;

iriSubjects = iriTypes . subjects;
iriObjects = iriTypes . objects;
iriObject nodes = head (iriObjects nodes);

literalType =
    map do t:
        case t of
        IRI iri: failWith "Unexpected iri \"\(iri)\"!";
        Blank n: failWith "Unexpected blank node \"\(n)\"!";
        Literal lit: lit;
        esac done;

literalObjects = literalType . objects;
literalObject nodes = head (literalObjects nodes);

packLists = // map from plugin node to list of pack { name, url }
    (packs = iriSubjects (pluginStore.match {
         s = Wildcard (),
         p = Known (pluginStore.expand "a"),
         o = Known (pluginStore.expand "vamp:PluginPack")
         });
     packsForNode pnode =
        (lib = head (iriSubjects (pluginStore.match {
             s = Wildcard (),
             p = Known (pluginStore.expand "vamp:available_plugin"),
             o = Known pnode
             }));
         packsNodesWithLib = concatMap do pack:
             if pluginStore.contains {
                   s = pack,
                   p = pluginStore.expand "vamp:available_library",
                   o = lib
                }
             then [pack]
             else []
             fi done packs;
         map do packNode:
             { name = (literalObject (pluginStore.match {
                 s = Known packNode,
                 p = Known (pluginStore.expand "dc:title"),
                 o = Wildcard ()
                 })).value,
               url = case iriObject (pluginStore.match {
                 s = Known packNode,
                 p = Known (pluginStore.expand "foaf:page"),
                 o = Wildcard ()
                 }) of IRI iri: iri; Blank n: failWith "Blank node not allowed for download URL" esac };
         done packsNodesWithLib);
     mapIntoHash id packsForNode (vamprdf.allPluginNodes pluginStore));

platformTag { headers, queryParams } =
    // The returned value is safe text -- always one of a fixed set of
    // strings, never from user input
    if "platform" in queryParams 
    then
        qp = strLower queryParams["platform"];
        if qp in knownPlatforms then qp else "other" fi;
    else
        ua = "User-Agent";
        if ua in headers then
            if headers[ua] =~ "Linux" then
                if headers[ua] =~ "i686" then "linux32"
                else "linux64"
                fi;
            elif headers[ua] =~ "Windows" then "win32"
            elif headers[ua] =~ "Macintosh" then "osx"
            else "other"
            fi
        else "other"
        fi
    fi;

platformName ptag =
    if ptag == "linux32" then "32-bit Linux"
    elif ptag == "linux64" then "64-bit Linux"
    elif ptag == "win32" then "Windows"
    elif ptag == "osx" then "Mac OS/X"
    else "Other"
    fi;

platformStatus tag pluginData =
    if tag == "other" then MaybeAvailable ()
    elif not empty? (find (== tag) pluginData.library.platforms) then Available ()
    elif pluginData.library.isVamPy and tag in vamPyPlatforms then Available ()
    elif empty? pluginData.library.platforms or pluginData.library.source then MaybeAvailable ()
    else Unavailable ()
    fi;

platformSelector queryParams current =
    "Platform" ^ strJoin ""
       (map do p:
            if p == current then
                span "platform-button platform-current"
                    "&nbsp;\(platformName p)&nbsp";
            else
                url = urlOf downloadPageRoute queryParams [ "platform": p ];
                span "platform-button"
                    "&nbsp;<a href='\(url)'>\(platformName p)</a>&nbsp;";
            fi;
        done [ "win32", "osx", "linux32", "linux64", "other" ]);

pluginData = 
    map (vamprdf.pluginDataByNode pluginStore)
       (vamprdf.allPluginNodes pluginStore);

//!!! should have cc:license as well

warnMissing pdata =
   (note prop =
        eprintln "**    note: \(pdata.pluginKey): Lacks \(prop)";
    libnote prop =
        eprintln "**    note: \(pdata.pluginKey): Library node lacks \(prop)";
    warn prop =
        eprintln "** WARNING: \(pdata.pluginKey): Lacks \(prop)";
    libwarn prop =
        eprintln "** WARNING: \(pdata.pluginKey): Library node lacks \(prop)";
    if pdata.name == "" then warn "dc:title" fi;
    if pdata.description == "" then warn "dc:description" fi;
    if pdata.maker == "" then warn "foaf:maker/foaf:name" fi;
    if pdata.copyright == "" then note "dc:rights" fi;
    if pdata.version == "" then note "owl:versionInfo" fi;
    if pdata.category == [] then warn "vamp:category" fi;
    if pdata.infoURL == "" then note "foaf:page" fi;
    if pdata.makerLogoURL == "" then libnote "foaf:maker/foaf:logo" fi;
    if pdata.library.name == "" then libwarn "dc:title" fi;
    if pdata.library.description == "" then libwarn "dc:description" fi;
    if pdata.library.downloadURL == "" then libwarn "doap:download-page" fi;
    if not pdata.library.source and 
       empty? pdata.library.platforms and
       not pdata.library.isVamPy then
        libwarn "availability";
    fi
    );

for pluginData warnMissing;

nonKeywords = mapIntoHash id id [
    "a", "and", "the", "an", "of", "plugin"
];

keywords search =
    concatMap do w:
        if w in nonKeywords or strLength w < 2 then [] else [w] fi
        done (strSplit "\\s+" search);

textSearchScore search =
   (search = strLower search;
    needles = keywords search;
    do haystack:
        haystack = strLower haystack;
        if strIndexOf haystack search 0 >= 0 then 
            2 * (if needles == [] then 1 else length needles fi)
        else
            fold do acc needle: 
                if strIndexOf haystack needle 0 >= 0 then acc + 1 else acc fi
                done 0 needles
        fi
    done);

pluginSearchScore search plugin =
   (score = (scorer = textSearchScore search;
    3 * scorer plugin.name +
    2 * scorer plugin.library.name +
    scorer plugin.description +
    scorer plugin.library.description +
    scorer plugin.library.soname +
    scorer plugin.maker +
    scorer plugin.identifier +
    fold do acc cat: acc + scorer cat done 0 plugin.category +
    fold do acc out:
        if scorer out.name > 0 or scorer out.description > 0 then 1
        else acc fi
        done 0 plugin.outputs);
    score);

filterPlugins search ptag plugins =
   (found = 
        if strLength search < 2 then []
        else
            scorer p =
                pluginSearchScore search p +
                    if strLength search > 3 and strEnds? search "s" then
                        pluginSearchScore
                           (strLeft search (strLength search - 1)) p
                        / 2
                    else 0
                    fi;
            results = concatMap do p:
                score = scorer p;
                if score > 0 then
                    case platformStatus ptag p of
                    Available (): [ { score = score + 100, p } ];
                    MaybeAvailable (): [ { score = score + 50, p } ];
                    Unavailable (): [ { score, p } ];
                    esac
                else
                    []
                fi
                done plugins;
            sorted = sortBy do a b: a.score > b.score done results;
            map (.p) sorted
        fi;
    // Now produce a list of the found plugins, in the same order, but
    // with plugins from the same library grouped together (at the
    // position of the first plugin from that library)
    libs = [:];
    orderedLibs = array [];
    for found do f: 
        s = f.library.soname;
        if not s in libs then
            push orderedLibs s;
            libs[s] := true;
        fi;
    done;
    concatMap do s:
        concatMap do f:
            if s == f.library.soname then [f] else [] fi
        done found;
    done orderedLibs);

sortPlugins =
   (props = map (strLower .) [ (.library.name), (.maker), (.name) ];
    sortBy do a b:
        case (find do prop: prop a != prop b done props) of
        prop::_: prop a < prop b;
        _: false;
        esac
    done);

nextNumber =
   (var num = 0;
      \(synchronized num do:
            num := num + 1;
            num;
        done));

highlighted search text =
   (hlaux search text tlower =
       (ix = strIndexOf tlower search 0;
        if ix >= 0 then
            slen = strLength search;
            tlen = strLength text;
            strLeft text ix ^
                span "highlight"
                   (strSlice text ix (ix + slen)) ^
                hlaux search 
                   (strSlice text (ix + slen) tlen)
                   (strSlice tlower (ix + slen) tlen);
        else
            text
        fi);
    if search == "" then text
    else 
        h = hlaux (strLower search) text (strLower text);
        if h != text then h
        else fold do acc key:
            hlaux (strLower key) acc (strLower acc)
            done text (keywords search)
        fi
    fi);

groupByLibrary = groupBy
    do a b:
        if a.libraryName == "" or b.libraryName == "" 
        then false 
        else a.libraryName == b.libraryName 
        fi 
    done;

alternator classbase =
   (var prev = false;
      \(synchronized prev do:
            if prev then prev := false; "\(classbase)-odd"
            else prev := true; "\(classbase)-even" 
            fi
        done));

showHide expanded i =
   (text = if expanded then "&#9660; Less" else "&#9654; More" fi;
    divc "plugs-showhide"
       ("<a id='plugs-showhide-\(i)' onclick=\"togglePlugin('\(i)');\"/>\(text)</a>"));
        
renderLibraryPlugins expanded altern plugins =
    case plugins of
    first::rest:
       (i = nextNumber ();
        defaultShownHidden = 
            if expanded then 'default-shown' else 'default-hidden' fi;
        eltid "li" "library \(altern ())" "lib-\(i)"
           (divc "library-header"
               (if first.logo == "" then "" else divc "maker-logo" first.logo fi ^
                divc "library-name" first.libraryName ^
                divc "library-maker" first.makerName) ^
            divc "library-body"
               (divc "library-notes"
                   (divc "library-availability" first.availability ^
                    divc "library-vampy" first.vamPy ^
                    divc "library-source-availability" first.sourceAvailability ^
                    divc "library-availability" first.inPacks ^
                    divc "library-links" first.libraryLinks) ^
                divc "library-main"
                   (divc "library-description" first.libraryDescription ^
                    showHide expanded i ^
                    "\n" ^
                    eltid "ul" "plugins \(defaultShownHidden)" "plugs-\(i)"
                       (strJoin "\n"
                           (map do p:
                                elt "li" "plugin"
                                  ("<img class='plugin-piece' src='/images/jigsaw-piece.png'>" ^
                                   divc "plugin-name" p.name ^
                                   divc "plugin-category" p.category ^
                                   divc "plugin-description" p.description ^
                                   if p.pluginLinks != "" 
                                   then divc "plugin-links" p.pluginLinks
                                   else "" fi)
                            done plugins)))));
        );
    _: "";
    esac;

renderLibraryList expanded fragments =
   (alt = alternator "library";
    "<ul>\n" ^
    strJoin "\n" (map (renderLibraryPlugins expanded alt) (groupByLibrary fragments)) ^
    "</ul>\n");

searchForm queryParams ptag =
   (deflt =
        if "search" in queryParams then
            esc queryParams["search"] 
        else ""
        fi;
    "<form action='\(downloadPageRoute)' method='get'>\n" ^
    "<input type='hidden' name='platform' value='\(ptag)'>\n" ^
    "<label for='search'>Search:</label>\n" ^
    "<input id='search' type='text' name='search' value='\(deflt)'>\n" ^
    "<input type='submit' name='go' value='Go'>\n" ^
    "<input type='submit' name='clear' value='Clear'>\n" ^
    "</form>\n");

pluginHtmlFragments ptag processed descriptor =
   (pname = platformName ptag;
    sentence text = strReplace "VAMP" "Vamp"
       (if strEnds? text "." then text else text ^ "." fi);
    pd = descriptor;
    {
        name = processed pd.name,
        description =
            strReplace "\n" "<br>"
               (strReplace "\n\n" "\n"
                   (processed (sentence (strTrim pd.description)))),
        logo =
            if pd.makerLogoURL == "" then "" 
            else
                i = "<img border=0 class='maker-logo' src=\"\(pd.makerLogoURL)\">";
                if pd.makerInfoURL != "" then link pd.makerInfoURL i
                else i
                fi
            fi,
        libraryLinks = 
        //!!! separate out, this mingling doesn't help
            if pd.library.downloadURL != "" then
                if pd.library.infoURL != "" then
                    link pd.library.infoURL "Plugin homepage" ^ "<br>"
                else ""
                fi ^
                    link pd.library.downloadURL "Download"
            elif pd.library.infoURL != "" then
                link pd.library.infoURL "Plugin homepage"
            else ""
            fi,
        pluginLinks = 
            if pd.infoURL != "" then
                link pd.infoURL "Documentation"
            else ""
            fi,
        libraryName =
            processed
                if pd.library.name == "" then pd.library.soname
                else pd.library.name
                fi,
        libraryDescription = 
            processed (sentence (strTrim pd.library.description)),
        makerName = processed pd.maker,
        availability = 
            if pname == "" or pname == "Other" then "" 
            else 
                case platformStatus ptag pd of
                Available ():
                    span "availability available" "Available for selected platform";
                MaybeAvailable ():
                    span "availability maybe-available" "";
                Unavailable ():
                    span "availability unavailable" "Not available for selected platform";
                esac;
            fi,
        sourceAvailability = 
            span "availability"
               (if pd.library.source then "With source code" else "No source code" fi),
        inPacks = 
            case packLists[pd.pluginNode] of
            []: "";
            packs: strJoin "<br>" (map do p:
                span "pack" "Included in <a href='\(p.url)'>\(p.name)</a>"
                done packs);
            esac,
        vamPy =
            span "availability"
               (if pd.library.isVamPy then "Requires <a href='https://www.vamp-plugins.org/vampy.html'>VamPy</a>" else "" fi),
        category = strJoin " &rarr; " (map processed pd.category),
        data = pd,
    });

pickFeaturedPlugin ptag =
   (available = array (concat
       (map do fp:
            case vamprdf.pluginDataByKey pluginStore fp of
            Some plug:
                case platformStatus ptag plug of
                Available (): [plug];
                _: [];
                esac;
            _:
                eprintln "** WARNING: featured plugin key \"\(fp)\" not found";
                [];
            esac
        done featured));
    if empty? available 
    then
        eprintln "**    note: no featured plugin available for this platform";
        None ();
    else
        day = (new GregorianCalendar())#get(Calendar#DAY_OF_YEAR);
        ix = day % (length available);
        Some available[ix];
    fi);

pickFeaturedLibrary ptag =
    case pickFeaturedPlugin ptag of
    Some plug:
        // Get all plugins for this library, so that it shows them all
        // when expanded
        libname = plug.library.soname;
        concat (map do p:
            if p.library.soname == libname then [p]
            else []
            fi
        done pluginData);
    None ():
        []
    esac;

renderFeaturedPlugin ptag =
   (plugs = pickFeaturedLibrary ptag;
    if empty? plugs then "";
    else renderLibraryList false (map (pluginHtmlFragments ptag id) plugs);
    fi);

renderPluginList { queryParams, search, ptag, plugs } =
   (processed = (highlighted search) . esc;
    fragments = map (pluginHtmlFragments ptag processed) plugs;
    pluginList = 
        if not empty? fragments then
            divc "pluginlist"
               (renderLibraryList (search != "") fragments);
        else
            divc "no-results"
               (elt "p" "" "No results found");
        fi;
    "<script src='/bits.js' type='text/javascript'></script>" ^
    divc "search-form" (searchForm queryParams ptag) ^
    divc "platform-selector" (platformSelector queryParams ptag) ^
    if search == "" then
        fhtml = renderFeaturedPlugin ptag;
        if fhtml != "" then
            divc "featured"
               ("<h3>Currently featured</h3>" ^ renderFeaturedPlugin ptag) ^
            "<h3>All plugins</h3>"
        else
            ""
        fi
    else 
        "" 
    fi ^
    pluginList);


// We serve mostly static data, with just the odd dynamic path. Static
// data is served from public/ and we override any routes we want for
// dynamic content.

staticFileLocation "public";

// Download page, likely /download.html

route (Get downloadPageRoute) do { headers, queryParams }:
    if "clear" in queryParams and not "go" in queryParams then
        queryParams["search"] := "";
    fi;
    ptag = platformTag { headers, queryParams };
    search = if "search" in queryParams then queryParams["search"] else "" fi;
    plugs = 
        if search != "" then
            filterPlugins search ptag pluginData
        else
            sortPlugins pluginData
        fi;

    readFile "templates/download.html" "UTF-8"
        do handle:
            strJoin "\n"
               (map do line:
                    if line =~ "insert table here" then
                        renderPluginList { queryParams, search, ptag, plugs }
                    else
                        line
                    fi
                done (handle.lines ()))
        done;
done;

