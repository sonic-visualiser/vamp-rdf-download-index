
program pluginlist;

{ route, esc, link, urlOf, divc, divid, elt, eltid, span, spanid, staticFileLocation } = load spag;

store = load yertle.store;
property = load yertle.property;
vamp = load may.vamp;
vamprdf = load may.vamp.vamprdf;

downloadPageRoute = "/download2.html";

pluginStore = store.newRdfStore ();
vamprdf.loadSystemVampRdf pluginStore;

knownPlatforms = mapIntoHash id id [
    "linux32", "linux64", "win32", "osx", "other"
];

vamPyPlatforms = mapIntoHash id id [
    "linux32", "linux64", "win32", "osx"
];

platformTag { headers, queryParams } =
    // The returned value is safe text -- always one of a fixed set of
    // strings, never from user input
    if "platform" in queryParams 
    then
        qp = strLower queryParams["platform"];
        if qp in knownPlatforms then qp else "other" fi;
    else
        ua = "User-Agent";
        if ua in headers then
            if headers[ua] =~ "Linux" then
                if headers[ua] =~ "i686" then "linux32"
                else "linux64"
                fi;
            elif headers[ua] =~ "Windows" then "win32"
            elif headers[ua] =~ "Macintosh" then "osx"
            else "other"
            fi
        else "other"
        fi
    fi;

platformName ptag =
    if ptag == "linux32" then "32-bit Linux"
    elif ptag == "linux64" then "64-bit Linux"
    elif ptag == "win32" then "Windows"
    elif ptag == "osx" then "Mac OS/X"
    else "Other"
    fi;

platformStatus tag pluginData =
    if tag == "other" then MaybeAvailable ()
    elif not empty? (find (== tag) pluginData.library.platforms) then Available ()
    elif pluginData.library.isVamPy and tag in vamPyPlatforms then Available ()
    elif empty? pluginData.library.platforms or pluginData.library.source then MaybeAvailable ()
    else Unavailable ()
    fi;

platformSelector queryParams current =
    "Platform" ^ strJoin ""
       (map do p:
            if p == current then
                "<span class=\"platform-button platform-current\">&nbsp;\(platformName p)&nbsp;</span>"
            else
                url = urlOf downloadPageRoute queryParams [ "platform": p ];
                span "platform-button"
                    "&nbsp;<a href=\"\(url)\">\(platformName p)</a>&nbsp;";
            fi;
        done [ "win32", "osx", "linux32", "linux64", "other" ]);

pluginData = 
    map (vamprdf.pluginDataByNode pluginStore)
       (vamprdf.allPluginNodes pluginStore);

//!!! should have cc:license as well

warnMissing pdata =
   (note prop =
        eprintln "**    note: \(pdata.pluginKey): Lacks \(prop)";
    libnote prop =
        eprintln "**    note: \(pdata.pluginKey): Library node lacks \(prop)";
    warn prop =
        eprintln "** WARNING: \(pdata.pluginKey): Lacks \(prop)";
    libwarn prop =
        eprintln "** WARNING: \(pdata.pluginKey): Library node lacks \(prop)";
    if pdata.name == "" then warn "dc:title" fi;
    if pdata.description == "" then warn "dc:description" fi;
    if pdata.maker == "" then warn "foaf:maker/foaf:name" fi;
    if pdata.copyright == "" then note "dc:rights" fi;
    if pdata.version == "" then note "owl:versionInfo" fi;
    if pdata.category == [] then warn "vamp:category" fi;
    if pdata.infoURL == "" then note "foaf:page" fi;
    if pdata.makerLogoURL == "" then libnote "foaf:maker/foaf:logo" fi;
    if pdata.library.name == "" then libwarn "dc:title" fi;
    if pdata.library.description == "" then libwarn "dc:description" fi;
    if pdata.library.downloadURL == "" then libwarn "doap:download-page" fi;
    if not pdata.library.source and 
       empty? pdata.library.platforms and
       not pdata.library.isVamPy then
        libwarn "availability";
    fi
    );

for pluginData warnMissing;

nonKeywords = mapIntoHash id id [
    "a", "and", "the", "an", "of", "plugin"
];

keywords search =
    concatMap do w:
        if w in nonKeywords or strLength w < 2 then [] else [w] fi
        done (strSplit "\\s+" search);

textSearchScore search =
   (search = strLower search;
    needles = keywords search;
    do haystack:
        haystack = strLower haystack;
        if strIndexOf haystack search 0 >= 0 then 
            2 * (if needles == [] then 1 else length needles fi)
        else
            fold do acc needle: 
                if strIndexOf haystack needle 0 >= 0 then acc + 1 else acc fi
                done 0 needles
        fi
    done);

pluginSearchScore search plugin =
   (scorer = textSearchScore search;
    3 * scorer plugin.name +
    2 * scorer plugin.library.name +
    scorer plugin.description +
    scorer plugin.library.description +
    scorer plugin.library.soname +
    scorer plugin.maker +
    fold do acc cat: acc + scorer cat done 0 plugin.category +
    fold do acc out:
        if scorer out.name > 0 or scorer out.description > 0 then 1
        else acc fi
        done 0 plugin.outputs);

filterPlugins search ptag plugins =
   (found = 
        if strLength search < 2 then []
        else
            scorer = pluginSearchScore search;
            results = concatMap do p:
                score = scorer p;
                if score > 0 then
                    case platformStatus ptag p of
                    Available (): [ { score = score + 100, p } ];
                    MaybeAvailable (): [ { score = score + 50, p } ];
                    Unavailable (): [ { score, p } ];
                    esac
                else
                    []
                fi
                done plugins;
            map (.p) (sortBy do a b: a.score > b.score done results)
        fi;
    // Now produce a list of the found plugins, in the same order, but
    // with plugins from the same library grouped together (at the
    // position of the first plugin from that library)
    libs = [:];
    orderedLibs = array [];
    for found do f: 
        s = f.library.soname;
        if not s in libs then
            push orderedLibs s;
            libs[s] := true;
        fi;
    done;
    concatMap do s:
        concatMap do f:
            if s == f.library.soname then [f] else [] fi
        done found;
    done orderedLibs);

sortPlugins =
   (props = map (strLower .) [ (.library.name), (.maker), (.name) ];
    sortBy do a b:
        case (find do prop: prop a != prop b done props) of
        prop::_: prop a < prop b;
        _: false;
        esac
    done);

iriIdMap = [:];
var iriIdNext = 0;

divIdFor iri =
   synchronized iriIdMap do:
       if not iri in iriIdMap then
           iriIdMap[iri] := "piri\(iriIdNext)";
           iriIdNext := iriIdNext + 1;
       fi;
       iriIdMap[iri];
   done;

highlighted search text =
   (hlaux search text tlower =
       (ix = strIndexOf tlower search 0;
        if ix >= 0 then
            slen = strLength search;
            tlen = strLength text;
            strLeft text ix ^
                "<span class=\"highlight\">" ^ 
                strSlice text ix (ix + slen) ^
                "</span>" ^ 
                hlaux search 
                   (strSlice text (ix + slen) tlen)
                   (strSlice tlower (ix + slen) tlen);
        else
            text
        fi);
    if search == "" then text
    else 
        h = hlaux (strLower search) text (strLower text);
        if h != text then h
        else fold do acc key:
            hlaux (strLower key) acc (strLower acc)
            done text (keywords search)
        fi
    fi);

groupByLibrary = groupBy do a b: if a.libraryName == "" or b.libraryName == "" then false else a.libraryName == b.libraryName fi done;

renderSearchResult fragment =
    fragment.logo ^ fragment.libraryName ^ fragment.name;

alternator classbase =
   (var prev = false;
      \(synchronized prev do:
            if prev then prev := false; "\(classbase)-odd"
            else prev := true; "\(classbase)-even" 
            fi
        done));

showHide expanded i =
   (text = if expanded then "&#9660; Less" else "&#9654; More" fi;
    divc "plugs-showhide"
       ("<a id=\"plugs-showhide-\(i)\" onclick=\"togglePlugin('\(i)');\"/>\(text)</a>"));
        
renderLibraryPlugins expanded altern plugins =
    case plugins of
    first::rest:
       (i = divIdFor first.data.pluginNode;
        defaultShownHidden = 
            if expanded then 'default-shown' else 'default-hidden' fi;
        eltid "li" "library \(altern ())" "lib-\(i)"
           (divc "library-header"
               (if first.logo == "" then "" else divc "maker-logo" first.logo fi ^
                divc "library-name" first.libraryName ^
                divc "library-maker" first.makerName) ^
            divc "library-body"
               (divc "library-notes"
                   (divc "library-availability" first.availability ^
                    divc "library-vampy" first.vamPy ^
                    divc "library-source-availability" first.sourceAvailability ^
                    divc "library-links" first.libraryLinks) ^
                divc "library-main"
                   (divc "library-description" first.libraryDescription ^
                    showHide expanded i ^
                    "\n" ^
                    eltid "ul" "plugins \(defaultShownHidden)" "plugs-\(i)"
                       (strJoin "\n"
                           (map do p:
                                elt "li" "plugin"
                                  ("<img class=\"plugin-piece\" src=\"/images/jigsaw-piece.png\">" ^
                                   divc "plugin-name" p.name ^
                                   divc "plugin-category" p.category ^
                                   divc "plugin-description" p.description ^
                                   if p.pluginLinks != "" 
                                   then divc "plugin-links" p.pluginLinks
                                   else "" fi)
                            done plugins)))));
        );
    _: "";
    esac;

renderLibraryList expanded fragments =
   (alt = alternator "library";
    "<ul>\n" ^
    strJoin "\n" (map (renderLibraryPlugins expanded alt) (groupByLibrary fragments)) ^
    "</ul>\n");

searchForm queryParams ptag =
   (deflt =
        if "search" in queryParams then
            esc queryParams["search"] 
        else ""
        fi;
    "<form action=\"\(downloadPageRoute)\" method=\"get\">\n" ^
    "<input type=\"hidden\" name=\"platform\" value=\"\(ptag)\">\n" ^
    "<label for=\"search\">Search:</label>\n" ^
    "<input id=\"search\" type=\"text\" name=\"search\" value=\"\(deflt)\">\n" ^
    "<input type=\"submit\" name=\"go\" value=\"Go\">\n" ^
    "<input type=\"submit\" name=\"clear\" value=\"Clear\">\n" ^
    "</form>\n");

renderPluginList { queryParams, search, ptag, plugs } =
   (pname = platformName ptag;
    processed = (highlighted search) . esc;
    sentence text = strReplace "VAMP" "Vamp"
       (if strEnds? text "." then text else text ^ "." fi);
    fragments = map do pd:
        {
            name = processed pd.name,
            description =
                strReplace "\n" "<br>"
                   (strReplace "\n\n" "\n"
                       (processed (sentence (strTrim pd.description)))),
            logo =
                if pd.makerLogoURL == "" then "" 
                else
                    i = "<img class=\"maker-logo\" src=\"\(pd.makerLogoURL)\">";
                    if pd.makerInfoURL != "" then link pd.makerInfoURL i
                    else i
                    fi
                fi,
            libraryLinks = 
            //!!! separate out, this mingling doesn't help
                if pd.library.downloadURL != "" then
                    if pd.library.infoURL != "" then
                        link pd.library.infoURL "Plugin homepage" ^ "<br>"
                    else ""
                    fi ^
                        link pd.library.downloadURL "Download"
                elif pd.library.infoURL != "" then
                    link pd.library.infoURL "Plugin homepage"
                else ""
                fi,
            pluginLinks = 
                if pd.infoURL != "" then
                    link pd.infoURL "Documentation"
                else ""
                fi,
            libraryName =
                processed
                    if pd.library.name == "" then pd.library.soname
                    else pd.library.name
                    fi,
            libraryDescription = 
                processed (sentence (strTrim pd.library.description)),
            makerName = processed pd.maker,
            availability = 
                if pname == "" or pname == "Other" then "" 
                else 
                    case platformStatus ptag pd of
                    Available ():
                        span "availability available" "Available for \(pname)";
                    MaybeAvailable ():
                        span "availability maybe-available" "";
                    Unavailable ():
                        span "availability unavailable" "Not available for \(pname)";
                    esac;
                fi,
            sourceAvailability = 
                span "availability"
                   (if pd.library.source then "With source code" else "No source code" fi),
            vamPy =
                span "availability"
                   (if pd.library.isVamPy then "Requires <a href=\"http://www.vamp-plugins.org/vampy.html\">VamPy</a>" else "" fi),
            category = strJoin " &rarr; " (map processed pd.category),
            data = pd,
        }
    done plugs;

    pluginList = 
        if not empty? fragments then
            divc "pluginlist"
               (renderLibraryList (search != "") fragments);
        else
            divc "no-results"
               (elt "p" "" "No results found");
        fi;

    "<script src=\"/bits.js\" type=\"text/javascript\"></script>" ^
    divc "search-form" (searchForm queryParams ptag) ^
    divc "platform-selector" (platformSelector queryParams ptag) ^
    pluginList);

staticFileLocation "public";

route (Get downloadPageRoute) do { headers, queryParams }:
    if "clear" in queryParams and not "go" in queryParams then
        queryParams["search"] := "";
    fi;
    ptag = platformTag { headers, queryParams };
    search = if "search" in queryParams then queryParams["search"] else "" fi;
    plugs = 
        if search != "" then
            filterPlugins search ptag pluginData
        else
            sortPlugins pluginData
        fi;

    readFile "templates/download-test.html" "UTF-8" //!!!
        do handle:
            strJoin "\n"
               (map do line:
                    if line =~ "insert table here" then
                        renderPluginList { queryParams, search, ptag, plugs }
                    else
                        line
                    fi
                done (handle.lines ()))
        done;
done;
